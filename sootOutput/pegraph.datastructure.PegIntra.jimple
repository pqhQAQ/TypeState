public class pegraph.datastructure.PegIntra extends java.lang.Object
{
    private soot.SootMethod soot_method;
    public java.util.List ceList;

    public void <init>(soot.SootMethod)
    {
        pegraph.datastructure.PegIntra this;
        soot.SootMethod sm;
        java.util.ArrayList $r0;

        this := @this: pegraph.datastructure.PegIntra;
        sm := @parameter0: soot.SootMethod;
        specialinvoke this.<java.lang.Object: void <init>()>();
        $r0 = new java.util.ArrayList;
        specialinvoke $r0.<java.util.ArrayList: void <init>()>();
        this.<pegraph.datastructure.PegIntra: java.util.List ceList> = $r0;
        this.<pegraph.datastructure.PegIntra: soot.SootMethod soot_method> = sm;
        return;
    }

    public void exportIntraGraph(java.lang.String)
    {
        pegraph.datastructure.PegIntra this;
        java.lang.String path, file_path, regEx, $r1, $r4, $r5;
        java.lang.StringBuilder $r0, $r8;
        java.util.regex.Pattern p;
        java.util.regex.Matcher m;
        java.io.File file, $r6;
        java.io.FileWriter fileWriter, $r7;
        java.util.Iterator l9;
        pegraph.datastructure.CallEdge edge;
        java.lang.Exception e, $r13;
        soot.SootMethod $r2, $r9;
        soot.SootClass $r3, $r10;
        boolean $z0;
        int $i0;
        java.util.List $r11;
        java.lang.Object $r12;

        this := @this: pegraph.datastructure.PegIntra;
        path := @parameter0: java.lang.String;
        $r0 = new java.lang.StringBuilder;
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(path);
        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);
        $r2 = this.<pegraph.datastructure.PegIntra: soot.SootMethod soot_method>;
        $r3 = virtualinvoke $r2.<soot.SootMethod: soot.SootClass getDeclaringClass()>();
        $r4 = virtualinvoke $r3.<soot.SootClass: java.lang.String getName()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r2 = this.<pegraph.datastructure.PegIntra: soot.SootMethod soot_method>;
        $r4 = virtualinvoke $r2.<soot.SootMethod: java.lang.String getName()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt");
        file_path = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();
        regEx = "[`~!@#$%^&*()+=|{}\';\',\\[\\]<>?~\uff01@#\uffe5%\u2026\u2026&*\uff08\uff09\u2014\u2014+|{}\u3010\u3011\u2018\uff1b\uff1a\u201d\u201c\u2019\u3002\uff0c\u3001\uff1f]";
        p = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(regEx);
        m = virtualinvoke p.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(file_path);
        $r5 = virtualinvoke m.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("");
        file_path = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();
        $r6 = new java.io.File;
        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(file_path);
        file = $r6;

     label0:
        $z0 = virtualinvoke file.<java.io.File: boolean exists()>();
        if $z0 != 0 goto label1;

        virtualinvoke file.<java.io.File: boolean createNewFile()>();

     label1:
        $r7 = new java.io.FileWriter;
        specialinvoke $r7.<java.io.FileWriter: void <init>(java.io.File)>(file);
        fileWriter = $r7;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("method: ");
        $r9 = this.<pegraph.datastructure.PegIntra: soot.SootMethod soot_method>;
        $r10 = virtualinvoke $r9.<soot.SootMethod: soot.SootClass getDeclaringClass()>();
        $r1 = virtualinvoke $r10.<soot.SootClass: java.lang.String getName()>();
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r9 = this.<pegraph.datastructure.PegIntra: soot.SootMethod soot_method>;
        $r1 = virtualinvoke $r9.<soot.SootMethod: java.lang.String getName()>();
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");
        $r9 = this.<pegraph.datastructure.PegIntra: soot.SootMethod soot_method>;
        $i0 = virtualinvoke $r9.<java.lang.Object: int hashCode()>();
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");
        $r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke fileWriter.<java.io.FileWriter: void write(java.lang.String)>($r4);
        $r11 = this.<pegraph.datastructure.PegIntra: java.util.List ceList>;
        l9 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();
        goto label3;

     label2:
        $r12 = interfaceinvoke l9.<java.util.Iterator: java.lang.Object next()>();
        edge = (pegraph.datastructure.CallEdge) $r12;
        $r4 = virtualinvoke edge.<pegraph.datastructure.CallEdge: java.lang.String print()>();
        virtualinvoke fileWriter.<java.io.FileWriter: void write(java.lang.String)>($r4);

     label3:
        $z0 = interfaceinvoke l9.<java.util.Iterator: boolean hasNext()>();
        if $z0 != 0 goto label2;

        virtualinvoke fileWriter.<java.io.FileWriter: void close()>();

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;
        e = $r13;
        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

     label6:
        return;

        catch java.lang.Exception from label0 to label4 with label5;
    }

    public void exportMapGraph(java.lang.String)
    {
        pegraph.datastructure.PegIntra this;
        java.lang.String path, file_path, regEx, $r1, $r4, $r5, $r15;
        java.lang.StringBuilder $r0, $r9;
        java.util.regex.Pattern p;
        java.util.regex.Matcher m;
        java.io.File file, $r6;
        pegraph.PEGGenerator peg, $r7;
        java.io.FileWriter fileWriter, $r8;
        java.util.Iterator l10;
        pegraph.datastructure.CallEdge edge;
        java.lang.Exception e, $r17;
        soot.SootMethod $r2, $r10;
        soot.SootClass $r3, $r11;
        boolean $z0;
        int $i0;
        java.util.List $r12;
        java.lang.Object $r13, $r16;
        java.util.Map $r14;

        this := @this: pegraph.datastructure.PegIntra;
        path := @parameter0: java.lang.String;
        $r0 = new java.lang.StringBuilder;
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(path);
        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);
        $r2 = this.<pegraph.datastructure.PegIntra: soot.SootMethod soot_method>;
        $r3 = virtualinvoke $r2.<soot.SootMethod: soot.SootClass getDeclaringClass()>();
        $r4 = virtualinvoke $r3.<soot.SootClass: java.lang.String getName()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r2 = this.<pegraph.datastructure.PegIntra: soot.SootMethod soot_method>;
        $r4 = virtualinvoke $r2.<soot.SootMethod: java.lang.String getName()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_map.txt");
        file_path = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();
        regEx = "[`~!@#$%^&*()+=|{}\';\',\\[\\]<>?~\uff01@#\uffe5%\u2026\u2026&*\uff08\uff09\u2014\u2014+|{}\u3010\u3011\u2018\uff1b\uff1a\u201d\u201c\u2019\u3002\uff0c\u3001\uff1f]";
        p = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(regEx);
        m = virtualinvoke p.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(file_path);
        $r5 = virtualinvoke m.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("");
        file_path = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();
        $r6 = new java.io.File;
        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(file_path);
        file = $r6;

     label0:
        $z0 = virtualinvoke file.<java.io.File: boolean exists()>();
        if $z0 != 0 goto label1;

        virtualinvoke file.<java.io.File: boolean createNewFile()>();

     label1:
        $r7 = new pegraph.PEGGenerator;
        specialinvoke $r7.<pegraph.PEGGenerator: void <init>()>();
        peg = $r7;
        $r8 = new java.io.FileWriter;
        specialinvoke $r8.<java.io.FileWriter: void <init>(java.io.File)>(file);
        fileWriter = $r8;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("method: ");
        $r10 = this.<pegraph.datastructure.PegIntra: soot.SootMethod soot_method>;
        $r11 = virtualinvoke $r10.<soot.SootMethod: soot.SootClass getDeclaringClass()>();
        $r1 = virtualinvoke $r11.<soot.SootClass: java.lang.String getName()>();
        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);
        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r10 = this.<pegraph.datastructure.PegIntra: soot.SootMethod soot_method>;
        $r1 = virtualinvoke $r10.<soot.SootMethod: java.lang.String getName()>();
        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);
        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");
        $r10 = this.<pegraph.datastructure.PegIntra: soot.SootMethod soot_method>;
        $i0 = virtualinvoke $r10.<java.lang.Object: int hashCode()>();
        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");
        $r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke fileWriter.<java.io.FileWriter: void write(java.lang.String)>($r4);
        $r12 = this.<pegraph.datastructure.PegIntra: java.util.List ceList>;
        l10 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();
        goto label3;

     label2:
        $r13 = interfaceinvoke l10.<java.util.Iterator: java.lang.Object next()>();
        edge = (pegraph.datastructure.CallEdge) $r13;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r14 = <pegraph.PEGGenerator: java.util.Map mapTable>;
        $r15 = virtualinvoke edge.<pegraph.datastructure.CallEdge: java.lang.String callStr()>();
        $r16 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15);
        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);
        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");
        $r14 = <pegraph.PEGGenerator: java.util.Map mapTable>;
        $r15 = virtualinvoke edge.<pegraph.datastructure.CallEdge: java.lang.String receiveStr()>();
        $r16 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15);
        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);
        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");
        $r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke fileWriter.<java.io.FileWriter: void write(java.lang.String)>($r4);

     label3:
        $z0 = interfaceinvoke l10.<java.util.Iterator: boolean hasNext()>();
        if $z0 != 0 goto label2;

        virtualinvoke fileWriter.<java.io.FileWriter: void close()>();

     label4:
        goto label6;

     label5:
        $r17 := @caughtexception;
        e = $r17;
        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

     label6:
        return;

        catch java.lang.Exception from label0 to label4 with label5;
    }

    public boolean contains(pegraph.datastructure.CallEdge)
    {
        pegraph.datastructure.PegIntra this;
        pegraph.datastructure.CallEdge calledge;
        java.util.List $r0;
        boolean $z0;

        this := @this: pegraph.datastructure.PegIntra;
        calledge := @parameter0: pegraph.datastructure.CallEdge;
        $r0 = this.<pegraph.datastructure.PegIntra: java.util.List ceList>;
        $z0 = interfaceinvoke $r0.<java.util.List: boolean contains(java.lang.Object)>(calledge);
        if $z0 == 0 goto label0;

        return 1;

     label0:
        return 0;
    }

    public pegraph.datastructure.CallEdge addCallEdge(pegraph.datastructure.CallEdge)
    {
        pegraph.datastructure.PegIntra this;
        pegraph.datastructure.CallEdge calledge;
        java.util.List $r0;

        this := @this: pegraph.datastructure.PegIntra;
        calledge := @parameter0: pegraph.datastructure.CallEdge;
        $r0 = this.<pegraph.datastructure.PegIntra: java.util.List ceList>;
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(calledge);
        return null;
    }
}
