class T extends java.lang.Object
{
    T s;
    int a;

    void <init>()
    {
        T this;

        this := @this: T;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    public void testFW() throws java.io.IOException
    {
        T this;
        java.io.File $r0, file;
        byte a;
        java.io.FileWriter fw, $r1;
        int a;

        this := @this: T;
        $r0 = new java.io.File;
        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>("");
        file = $r0;
        a = 0;
        fw = null;
        if file == null goto label0;

        $r1 = new java.io.FileWriter;
        specialinvoke $r1.<java.io.FileWriter: void <init>(java.io.File)>(file);
        fw = $r1;

     label0:
        if a <= 0 goto label1;

        a = a + 1;

     label1:
        if file == null goto label2;

        virtualinvoke fw.<java.io.FileWriter: void close()>();

     label2:
        return;
    }

    public void testSwitch() throws java.io.IOException
    {
        T this;
        java.io.File $r0, file;
        byte a;
        java.io.FileWriter fw, $r1;
        int a;

        this := @this: T;
        $r0 = new java.io.File;
        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>("");
        file = $r0;
        a = 0;
        fw = null;
        tableswitch(a)
        {
            case 0: goto label0;
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label0:
        $r1 = new java.io.FileWriter;
        specialinvoke $r1.<java.io.FileWriter: void <init>(java.io.File)>(file);
        fw = $r1;

     label1:
        a = a + 1;

     label2:
        virtualinvoke fw.<java.io.FileWriter: void close()>();

     label3:
        return;
    }

    public T interfunc(T, T)
    {
        T this, a, b;

        this := @this: T;
        a := @parameter0: T;
        b := @parameter1: T;
        if a == null goto label0;

        return a;

     label0:
        return null;
    }

    public T test(T)
    {
        T this, a, $r0;

        this := @this: T;
        a := @parameter0: T;
        this.<T: T s> = a;
        $r0 = this.<T: T s>;
        return $r0;
    }

    public void call()
    {
        T this, $r0, a;

        this := @this: T;
        $r0 = new T;
        specialinvoke $r0.<T: void <init>()>();
        a = $r0;
        virtualinvoke this.<T: T test(T)>(a);
        return;
    }

    public void testlist() throws java.io.IOException
    {
        T this;
        java.io.File $r0, file;
        java.io.FileWriter fileWriter, fileWriter2, $r2;
        java.io.FileInputStream $r1;
        java.io.BufferedReader br, $r3;
        java.io.InputStreamReader $r4;

        this := @this: T;
        $r0 = new java.io.File;
        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>("");
        file = $r0;
        $r2 = new java.io.FileWriter;
        specialinvoke $r2.<java.io.FileWriter: void <init>(java.io.File)>(file);
        fileWriter = $r2;
        $r2 = new java.io.FileWriter;
        specialinvoke $r2.<java.io.FileWriter: void <init>(java.lang.String)>("");
        fileWriter2 = $r2;
        $r3 = new java.io.BufferedReader;
        $r4 = new java.io.InputStreamReader;
        $r1 = new java.io.FileInputStream;
        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(file);
        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r1, "UTF-8");
        specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4);
        br = $r3;
        virtualinvoke br.<java.io.BufferedReader: java.lang.String readLine()>();
        virtualinvoke br.<java.io.BufferedReader: void close()>();
        virtualinvoke fileWriter.<java.io.FileWriter: void write(java.lang.String)>("fw");
        virtualinvoke fileWriter2.<java.io.FileWriter: void write(java.lang.String)>("test");
        virtualinvoke fileWriter.<java.io.FileWriter: void close()>();
        virtualinvoke fileWriter2.<java.io.FileWriter: void close()>();
        return;
    }
}
