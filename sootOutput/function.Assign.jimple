public class function.Assign extends function.Function
{

    public void <init>()
    {
        function.Assign this;

        this := @this: function.Assign;
        specialinvoke this.<function.Function: void <init>()>();
        return;
    }

    public java.util.List func(soot.Local, soot.Local, java.util.List)
    {
        function.Assign this;
        soot.Local rop, lop;
        java.util.List rub;
        java.util.ArrayList $r0, list;
        boolean $z0;
        java.lang.String $r1, $r2, $r3;

        this := @this: function.Assign;
        rop := @parameter0: soot.Local;
        lop := @parameter1: soot.Local;
        rub := @parameter2: java.util.List;
        $r0 = new java.util.ArrayList;
        specialinvoke $r0.<java.util.ArrayList: void <init>()>();
        list = $r0;
        if rop != null goto label0;

        return list;

     label0:
        $z0 = interfaceinvoke rub.<java.util.List: boolean contains(java.lang.Object)>(rop);
        if $z0 != 0 goto label1;

        $r1 = interfaceinvoke rop.<soot.Local: java.lang.String getName()>();
        $z0 = specialinvoke this.<function.Assign: boolean contains(java.util.List,java.lang.String)>(rub, $r1);
        if $z0 == 0 goto label3;

     label1:
        $r2 = interfaceinvoke rop.<soot.Local: java.lang.String getName()>();
        $r3 = interfaceinvoke lop.<soot.Local: java.lang.String getName()>();
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);
        if $z0 == 0 goto label2;

        interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>(rop);
        goto label4;

     label2:
        interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>(lop);
        interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>(rop);
        goto label4;

     label3:
        $r2 = interfaceinvoke rop.<soot.Local: java.lang.String getName()>();
        $r3 = interfaceinvoke lop.<soot.Local: java.lang.String getName()>();
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);
        if $z0 != 0 goto label4;

        interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>(rop);

     label4:
        return list;
    }

    private boolean contains(java.util.List, java.lang.String)
    {
        function.Assign this;
        java.util.List rub;
        java.lang.String name, $r1;
        java.util.Iterator l4;
        soot.Local local;
        java.lang.Object $r0;
        boolean $z0;

        this := @this: function.Assign;
        rub := @parameter0: java.util.List;
        name := @parameter1: java.lang.String;
        l4 = interfaceinvoke rub.<java.util.List: java.util.Iterator iterator()>();
        goto label1;

     label0:
        $r0 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();
        local = (soot.Local) $r0;
        $r1 = interfaceinvoke local.<soot.Local: java.lang.String getName()>();
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(name);
        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();
        if $z0 != 0 goto label0;

        return 0;
    }
}
